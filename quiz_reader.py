########################################
# NATALIE MASSARO-KOON
# ROWAN HOLOP
#
# Introduction to Python: Final Project
#     * Quiz Builder - this program allows the user to build a quiz that can be taken afterwards!
#       1. First the program will open and read the files generated by the quiz maker
#           - Each of these will be stored in new variables to be used by this program
#       2. Then the quiz will open and read the file where the quiz was stored
#       3. While the quiz is opening and reading the lines from the quiz file, it will check to see if the line starts
#       with the last answer choice variable, if it does, it will prompt the user for an answer
#       4. Then the quiz will add up all of the users answers to figure out which answer was inputted most frequently
#           - If there is a tie, the program will print out the various results that tied
#           - Otherwise, the program will print out the winning result
#
#
# File 3/3 - Quiz reader file
#
########################################

from colorama import Fore

import quiz_functions

# Creates some variables we will edit soon
user_answers = []
result_description = {}
result_names = []
answer_choices = []

# Opens the file we stored results_names in from quiz_maker and reads them back into a new list
p = open('result_names.txt', 'r')
rn = p.readlines()
for r in rn:
    r = r.rstrip('\n')
    result_names.append(r)
p.close()

# Opens the file we stored answer_choices in from quiz_maker and reads them back into a new list
c = open('answer_choices.txt', 'r')
ac = c.readlines()
for a in ac:
    a = a.rstrip('\n')
    answer_choices.append(a)
c.close()

# Opens the file we stored if_description in from quiz_maker and reads it into a new variable
d = open('if_description.txt', 'r')
if_description = d.read()
d.close()

# Checks to see if we wrote descriptions for our results, if yes, recreates the dictionary result_description from the
# file we stored it in, if not, deletes the empty dictionary
if if_description == 'Y':
    rd = open('result_description.txt', 'r')
    result_descriptions = rd.readlines()
    for re_de in result_descriptions:
        key, value = re_de.split(':')
        value = value.rstrip('\n')
        result_description[key] = value
    rd.close()
else:
    del result_description

# Opens and reads the file the quiz was stored in
f = open('the_quiz.txt', 'r')
lines = f.readlines()

# This for loop checks to see if the first character of a line matches the last possible answer choice so that we can
# prompt the user to input an answer after each question
for line in lines:
    print(line, end='')
    line = str(line)
    if answer_choices[-1] == line[0]:
        quiz_functions.GetAnswer(answer_choices, user_answers)

# Formatting for the end
print('* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *')
print()
print(Fore.LIGHTBLUE_EX + '                       ... adding up your results...')
print()
print(Fore.BLACK + '* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *')
print()

# This function call gives us the little letter that got the most answers
final_result = quiz_functions.GetResultCount(answer_choices, user_answers)

# This if, else statement addresses what happens if there is a "tie" between multiple answer choices
if ',' in final_result:
    # This checks for a comma in our string, since the GetResultCount function uses them join "tie" answers

    final_result_list = final_result.split(',')  # Makes a new list by splitting up the comma
    result_numbers = len(final_result_list)  # Counts the length of the list for further formatting

    print(f'You tied between {result_numbers} different results!')
    print()

    # For however many ties, calls the functions to print the results and descriptions if applicable
    for r in range(result_numbers):
        result_name = quiz_functions.GetResult(final_result_list[r], result_names)
        print(f'Result #{r+1} is {Fore.GREEN + result_name + Fore.BLACK}!')
        if if_description == 'Y':  # Checks to see if descriptions were written and then prints them
            print(f'    * {quiz_functions.GetDescription(result_name, result_description)}')
        print()


# If no tie, prints the winning result
else:
    result = quiz_functions.GetResult(final_result, result_names)
    print('Your result is ', end = '')
    print(Fore.GREEN + result + '!')
    if if_description == 'Y':  # Checks to see if descriptions were written and then prints it
        print(f'    * {quiz_functions.GetDescription(result, result_description)}')
    print()

# More formatting
print(Fore.BLACK + '* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *')
f.close()  # Closes the quiz file out
